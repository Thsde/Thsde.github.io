[{"title":"进程","date":"2017-03-12T14:10:43.000Z","path":"2017/03/12/进程/","text":"Process Concept简单来说，进程就是指正在执行的程序，执行并不一定是在运行。一个进程包括以下三个方面 程序计数器 (program counter) 堆栈段 (stack) 数据段 (data section) 程序包括代码段、当前活动（通过PC的值和处理器寄存器的内容来表示）、堆栈段（包括临时数据，如函数参数、返回地址和局部变量）和数据段（包括全局变量），可能还包括堆(heap)，进程在运行期间动态分配的内存。 如下图所示： Process State new(创建): The proces is being created running(运行): Instructions are being executed waiting(等待): The process is waiting for some event to occur ready(就绪): The process is waiting to be assigned to a processor terminated(终止): The process has finished execution 进程五状态表： Process Control Block(PCB)每个进程在操作系统内用进程控制块来表示，它包含许多与一个特定进程相关的信息。 Process state: 包括创建、就绪、运行、等待、停止等 Program counter: 表示进程要执行的下个指令的地址 CPU registers CPU scheduling information Memory-management information Accounting information I/O status information Process Scheduling为了最大效率地利用CPU，进程调度选择一个可用的进程到CPU上执行。 Process Scheduling Queues(调度队列) Job queue – set of all processes in the system Ready queue – set of all processes residing in main memory, ready and waiting to execute Device queues – set of processes waiting for an I/O device Processes migrate(迁移) among the various queues Scheduler(调度程序)进程在其生命周期中会在各种调度队列之间迁移。为了调度，操作系统必须按某种方式从这些队列中选择进程。进程选择是由相应的调度程序来执行的。 长期调度程序(long-term scheduler)：又叫做作业调度程序(job scheduler)从存放”进程”的大容量存储设备的缓存池中选择进程，并加载进内存准备执行。 短期调度程序(short-term scheduler)：又叫做CPU调度程序，从准备执行的进程中选择进程，并为之分配CPU。 中期调度程序(medium-term scheduler)：核心思想是能将进程从内存中移出，从而降低多道程序设计的程度。之后，进程能被重新调入内存，并从中断处继续执行。这种方案称为交换(swapping) 长期调度程序被调用的频率比较低，短期调度程序被调用的频率比较高 Context Switch(上下文切换)将CPU切换到另一个进程需要保存当前进程的状态（保存在PCB中）并恢复另一个进程的状态，这一任务称为上下文切换 Operations on Processes(进程操作)进程创建(Process Creation)进程在其执行过程中，能通过创建进程系统调用创建多个新进程。创建进程称为父进程，而新进程称为子进程。每个新进程可以在创建其他进程，从而行程了进程树。 创建进程的两种可能： 1、父进程与子进程并发(concurrently)执行2、父进程等待，直到某个或全部子进程执行完 新进程的地址空间的两种可能： 1、子进程是父进程的复制品（具有和父进程相同的程序和数据）2、子进程装入另一个新程序 资源共享： 1、父进程和子进程共享所有资源2、父进程分配一部分资源给子进程3、父进程和子进程没有共享资源 进程终止(Process Termination)当进程完成执行最后的语句并使用系统调用exit()请求操作系统删除自身时，进程终止。这是，进程可以返回状态值到父进程。所有进程资源被操作系统释放。父进程终止子进程的原因： 1、子进程使用了超过它被分配的一些资源2、分配给子进程的任务已不再需要3、父进程退出，如果父进程退出，操作系统不允许子进程继续，这称为级联终止(cascading termination) Cooperating Processes(协作进程)生产者-消费者问题是协作进程的通用范例。生产者进程产生信息以供消费者进程消费。 为了允许生产者进程和消费者进程能并发执行，必须要有一个缓冲来被生产者填充并被消费者所使用。此缓冲驻留在生产者进程和消费者进程的共享内存区域内，当消费者使用一项时，生产者能产生另一项。生产者和消费者必须同步，以免消费者消费一个没有生产出来的项。 缓冲主要存在两种： 1、无限缓冲(unbounded-buffer)：对缓冲大小没有限制。消费者可能不得不等待新的项，但生产者总是可以产生新项2、有限缓冲(bounded-buffer)：缓冲固定，若缓冲为空，消费者必须等待；若缓冲为满，生产者必须等待 Interprocess Communication(进程间通信IPC)通信模型： 共享内存系统通过生产者-消费者问题，协作进程加以实现 消息传递系统消息传递是由操作系统提供机制，让协作进程能通过消息传递工具来进行通信。消息传递工具提供至少两种操作：发送和接受。send(),receive()操作方法： 直接或间接通信 同步或异步通信 自动或显式缓冲 直接或间接通信对于直接通信，需要通信的每个进程明确地命名通信的接受者或发送者。 直接通信的通信线路具有如下特点： 在需要通信的每队进程之间自动建立线路。进程只需要知道相互通信的标识符。 一个线路只与两个进程相关。 每队进程之间只有一个线路。 这种方案展示了对称寻址，即发送和接受进程必须命名对方以便通信。另外有非对称寻址，即只要发送者命名接受者，而接受者不需要命名发送者。 间接通信：通过邮箱或端口来发送和接受信息。邮箱可以抽象成一个对象，进程可以向其中存放消息，也可以从中删除消息，每个邮箱都有一个唯一的标识符。间接通信的通信线路具有如下属性： 只有在两个进程共享一个邮箱时，才能建立通信线路。 一个线路可以与两个或更多的进程相关联 两个通信进程之间可有多个不同的线路，每个线路对应于一个邮箱 同步和异步通信消息传递可以是阻塞(block)或非阻塞 —— 也称为同步或异步 阻塞send：发送进程阻塞，知道消息被接收或被邮箱所接收 非阻塞send：发送进程发送消息并继续操作 阻塞receive：接受者阻塞，直到有消息可用 非阻塞receive：接受者收到一个有效消息或空消息 自动或显式缓冲不管通信是直接的或是间接的，通信进程所交换的消息都驻留在临时队列中。 零容量：线路中不能有任何消息处于等待，必须阻塞发送，知道接收者接收到信息。 有限容量：队列长度为有限的n，最多只能有n个消息驻留其中，若未满，可以接收新消息，且发送者可继续执行不必等待。若容量已满，必须阻塞发送直到队列中的空间可用为之。 无限容量：队列长度无线，从不阻塞发送者 零容量情况称为没有缓冲的消息系统，其他情况称为自动缓冲。 Communication in Client-Server","tags":[{"name":"操作系统","slug":"操作系统","permalink":"http://yoursite.com/tags/操作系统/"}]},{"title":"随笔_","date":"2017-03-11T14:32:03.000Z","path":"2017/03/11/2017年03月11日22-31-58/","text":"Welcome to my blog, enter password to read. Decrypt U2FsdGVkX1/DzGO/1ASlf7ZxSb+mV/OebHcjYAZAYBg+BPJzGniMy2Gx8y74fHSbU+0/NkOGsP8ZrRnhZRLTbOUVHD1qIq0icm/qkkPg+JgSYLauft4AH034GsAqcl44rtJnXCRG2M8KwwRyYkqGg67HcfaMOK5PMnZBJS8aAcqyubXoznzkxfCqHtbkV8LEEYCmZRV4Mymz7Feb8nsdBV7+tvRPtoMOQZkR2sg8BSgO0KcxvNHTb/B3az04XApfwurw5tYxlSAR8zzREvkzVc0maFSwjekB1TSPJV1hgzI+Je9PiWXlz/4XysrpdJDGuKd7S1lN/sOQ6/i2ZPV3UenjS6FBoRGK8SMM2pbXRce2jC03ftqyRRvRLvkLTSNVSPC5j8h2TgaZQKFZvGrGPkqPkah8FpSEVxZAzRvOKeHcywOXDmMoHW0rwIJNDsoxaNfXadIWyrSWHeY1RXvPrqifSfAdOz2zpUcNrrEq6tGj6piHxFfAwCBlLdGK4d/k9BMwdN+18f/ewzWCbDLK+nPJyHU5hzpGQy4D28Mn2W+ZMiCNj75uvnfjYyUZw7gjYfnPQ/uDojPTKpt0QV4U7AgX76rISGaBm2FCMhR4Ju8E5+gYwldRrTgg1+VRTkdzbv+LFBZz9QM+GGUHwtV6nVrDFAWhi2WUXNqHBFklnNdxjXTTn6JQH9xB4a6gq9R5fJFbN/lLN3o6lzE97dBm4DXojIoRFP65jakZ6yBtszy0qDP9D0SFuaGb9IrpaQfBjBxi3gfWIVr2sqg1+YPA6wUq2937m5v5rhOHzSqXgYjI2JMVX1J2/d6t71DmZvpTYlXz3C8mxOjiLAx2JAIdioo2ppiweVoMjK0MPLpADUHPNtp1D6Hp/9VDM/rqoIbqG+rmFRwq2RGS0xtYR+U9oQROGMV3ofVXMyxcRQaS81Owj6hDyGPjxTfmg1f5LchYEevRyNw/j8hTyuv1vOig2pxGupEs/gLtqeTpXGgHQY7gmv0PYQgIZG884ba0dqnmouN/nPBI8Qjbiyoa0sK9GlDRJ8GIsU1z+I4xCa4pDxmAn04NbPn6Biu3AW5QlCraq4oNejb0258AwnRaFhQ8djj2SG6e7j/jSg/sMe3gbjBEEbRfdLma9M+B8QzHACtvW6Ky9R2yvCD43CmwfLKHWitj0OxFFV+jMjAw29OWSs1AfN5Qr77cl0zrjQjJhserpSuJ6OsbTyRW+PkjNZuRwz6dfapFTg3ysHNvumPttQDb5LOLX5oZXiQ0mSi1HLdGw0JWLl54RVA2KlhyICYpTtzAuDaDEIzzMx/BRCOKjCdUjkcKZ4MC/2N2C9GLF+2rE3YEtm0o3GxoDTS9pu7tNgZNKHQ/KC+6IjA/qUKLMRYAONrt1x9lP0PQfOFCkqFrBWzwz+sf01oE6p9Vg9IJydOzSY236cxPy1Yl7UK6Fw+N1UBFt8Mu9kLKkFiLxT7MzwVF6zWA1HeBeR2l3GVpw4y9bkNlLVw24mNbYBa4ODbYKFEQgNUbB0Gz+3fXjgUv7gdOlYFrtzMT5X6sq8i/P1eBkXWGVt5Ps6BecKsv8aBPaBI/EBrGpjJhUWAraxJG0qkEiZVdhgxUJUFZ8yZ3DtuQehds+n6uhhEZSjW6BMxbXa8CiWa7SnRGwn3O3SQ90gsqkFi6SkcTZCEg1t2RhZU2bbe32p9Cbp0B+UyvRC6qI7/DAdKTwhRchY7S55UbEqHNQ5RIPelQM1nNb+4SWh3AEATcVhzZjk7Hun1IrcBzyIA6ARm+rtlsFf5lTVMrjhWE8sTSjTMtUyMSMtkbZgjzi/IqINN1hOT2TlwpXsZ6pJD0ATma6c3XPSHOa5Q44ntYIwdNj3iVJsCCAWgsExc4wIQWlEXCo3SU5UFrCo6kijL9TcylC3pJg6qoKOaK","tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"}]},{"title":"C++ Function","date":"2017-03-11T07:34:55.000Z","path":"2017/03/11/function/","text":"函数定义：一个典型的函数定义包括以下部分：返回类型(return type)、函数名、由形参(parameter)组成的列表、函数体(function body)。 函数声明：和其他名字一样，函数的名字也必须在使用之前声明。类似于变量，函数只能定义一次，但可以声明多次。如果一个函数永远不会被用到，允许只有声明，没有定义。函数的声明和函数的定义很类似，唯一的区别是函数声明无需函数体。由于不包含函数体，形参的名字也可以不用。 参数传递：传引用和传值：形参的类型决定了形参和实参交互的方式。如果形参是引用类型，它将被绑定到对应的实参上面，否则，将实参的值拷贝后赋值给形参。 1、使用引用传递避免拷贝，如果无须改变形参的值，最好声明为常量引用2、使用引用形参返回额外信息 const形参和实参顶层const作用于对象本身，和其他初始化过程一样，当用实参初始化形参时会忽略掉顶层const。所以：1void fcn(const int i) 调用时，因为顶层const被忽略，所以可以传入常量和非常量，同时，因为忽略顶层const的问题：12void fcn(const int i) &#123;&#125;void fcn(int i) &#123;&#125; 虽然C++支持函数重载，但是由于忽略了顶层const的关系，这样属于重复定义了该函数。 数组形参1、普通数组形参因为数组不允许被拷贝以及使用数组时通常会将其转化为指针。因此当我们向函数传递一个数组时，实际上传递的是指向数组首元素的指针。1234//虽然形式不同，但是这三个print函数是等价的，每个函数都有一个const int*类型的形参void print(const int*);void print(const int[]);void print(const int[10]); //此处的10表示我们期望数组含有多少元素，实际不一定 如果这样定义三个函数，编译器会报错，因为重复定义了。 2、数组引用形参C++允许将变量定义成数组的引用，基于此，形参也可以是数组的引用。此时，引用形参绑定到对应的实参上，用法如下:12void print(int (&amp;arr)[10]); //&amp;arr两端的括号必不可少，表示arr是具有10个整数的整型数组的引用void print(int &amp;arr[10]); //错误：将arr声明成了引用的数组 3、传递多维数组和其他数组一样，当将多维数组传递给函数时，真正传递的是指向数组首元素的指针。又因为并不存在多维数组，多维数组只是数组的数组，所以多维数组的首元素本身就是一个数组，指针就是一个指向数组的指针。数组第二维的大小都是数组类型的一部分，所以不能忽略：12void print(int (*matrix)[10], int rowSize) &#123;&#125; //(*matrix)两端的括号必不可少void print(int matrix[][10], int rowSize) &#123;&#125; //与上面的定义等价 默认实参1double get_area(int a = 10, int b = 10); 如上面的代码中，每个形参都提供了一个默认实参，一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值。因为get_area函数为它的所有形参都提供了默认实参，所以我们可以用0、1、2个实参来调用该函数：123area = get_area();area = get_area(1); //等价于get_area(1, 10)area = get_area(11, 11); //等价于get_area(11, 11)； 函数调用时实参按其位置解析，默认实参负责填补函数调用缺少的尾部实参(靠右侧位置)，所以只能省略尾部的实参。 函数的返回值1、没有返回值的函数没有返回值的函数只能存在于返回类型是void的函数中。返回void的函数不要求非得有return语句，因为在这类函数的最后一句后面会隐式地执行return。 2、有返回值的函数返回类型不是void的函数内的每一条return语句必须返回一个与分会类型相同类型的，或者是能隐式地转换成函数的返回类型的值。 3、值的返回的方式返回一个值的方式和初始化一个变量或形参的方式完全一样：返回的值用于初始化调用点的一个临时量，该临时量就是函数调用的结果。注意：不要返回局部对象的引用或者指针 4、引用返回左值函数的返回类型决定函数调用是否是左值。调用一个返回引用的函数得到左值，其他返回类型得到右值。可以像使用其他左值那样来使用返回引用的函数的调用，特别是，我们能为返回类型是非常量引用的函数的结果赋值。 5、返回数组指针同样，因为数组不能被拷贝，所以函数不能返回数组。不过，函数可以返回数组的指针或引用，但是由于返回数组的指针或引用的写法太过复杂，推荐使用尾置返回类型。（之后另开博客介绍） 函数重载1、重载函数的定义如果同一作用域内的几个函数名字相同但形参列表不同，我们称之为函数重载(overload)。这些函数接受的形参类型不一样，但是执行的操作类似。当调用这些函数时，编译器会根据传递的实参类型推断想要的是哪个函数。对于重载的函数，它们应该在形参数量或形参类型上有所不同。1、不允许两个函数出了返回类型外其他所有的要素都相同，若如此，则第二个函数的声明是错误的。2、虽然两个形参列表看起来不一样，但其实是一样的，如下：12int lookup(const int&amp; a);int lookup(const int&amp;); //虽然一个形参有名字，一个没有，但其实一样 123typedef Phone Telnoint lookup(const Phone&amp;);int lookup(const Telno&amp;); //Telno和Phone类型相同 12int lookup(int);int lookup(const int); 拥有顶层const的形参无法和另一个没有顶层const的形参区分开来12int lookup(int&amp;);int lookup(const int&amp;); 底层const可以被区分 2、重载函数的调用编译器首先将调用的实参与重载集合中每一个函数的形参进行比较，然后根据比较结果决定调用哪个函数，这个过程叫做函数匹配(function matching)或重载确定(overload resolution)，下面会着重介绍。调用重载函数的三种结果：1、编译器找到一个与实参最佳匹配(best match)的函数，并生成调用该函数的代码。2、找不到任何一个函数与调用的实参匹配，此时编译器发出无匹配(no match)的错误信息。3、有多于一个函数可以匹配，但是每一个都不是明显的最佳选择。此时也将发生错误，称为二义性调用(ambiguous call)。 内联函数将函数指定为内联函数(inline)，通常就是将它在每个调用点上“内联地”展开。1234incline const string &amp;shorterString(const string &amp;s1, const string &amp;s2) &#123; return s1.size() &lt;= s2.size() ? s1: s2;&#125; 该内联函数在调用的时候：1cout &lt;&lt; shorterString(s1, s2) &lt;&lt; endl; 将在编译过程中展开成类似于下面的形式：1cout &lt;&lt; s1.size() &lt;= s2.size() ? s1: s2 &lt;&lt; endl; 一般来说，内联机制用于优化规模较小、流程直接、频繁调用的函数。 函数匹配1、选定本次调用对应的重载函数集，集合中的函数称为候选函数(candidate function)。候选函数有两个特征：一是与被调用的函数同名，二是其声明在调用点可见。2、考察本次调用提供的实参，然后从候选函数中选出能被这组实参调用的函数，这些新选出的函数称为可行函数(viable function)。可行函数也有两个特征：一是其形参数量与本次调用提供的实参数量相等，二是每个实参的类型与对应的形参类型相同，或者能转换成形参的类型。3、寻找最佳匹配（如果存在的话），从可行函数中选择与本次调用最匹配的函数。原则是实参类型与形参类型越接近，匹配的越好。含有多个形参的函数匹配情况比较复杂，如果出现： 该函数每个实参的匹配都不劣于其他可行函数需要的匹配。 至少有一个实参的匹配优于其他可行函数提供的匹配。 如果在检查了所有实参之后没有一个函数“脱颖而出”，则该调用是二义性调用。 实参类型转换优先级1、精确匹配，包括以下情况： 实参类型和形参类型相同 实参从数组类型或函数类型转换成相应的指针类型 向实参添加顶层const或者从实参中删除顶层const 2、通过const转换实现的匹配3、通过类型提升实现的匹配4、通过算术类型转换或指针转换实现的匹配5、通过类类型转换实现的匹配 函数指针函数指针声明和定义函数指针指向的是函数而非对象。和其他指针一样，函数指针指向某种特定类型。函数的类型由它的返回类型和形参类型共同决定，与函数名无关。1bool lengthCompare(const string &amp;, const string &amp;); 该函数的类型是bool(const string &amp;, const string &amp;)。要想声明一个可以指向该函数的指针，只需要用指针替换函数名即可：1bool (*pf)(const string &amp;, const string &amp;); //*pf必须要加括号，否则表示名为pf，返回值为bool*的函数 函数指针的使用当我们将函数名作为一个值使用时，该函数自动地转换成指针。12pf = lengthCompare; //pf指向名为lengthCompare的函数pf = &amp;lengthCompare; //等价的赋值语句，取地址符是可选的 此外，我们还能直接使用指向函数的指针调用该函数，无须提前解引用指针。在指向不同函数类型的指针间不存在转换规则，必须精确匹配 函数指针形参和数组类似，虽然不能定义函数类型的形参，但是形参可以是指向函数的指针。此时，形参看起来是函数类型，实际上确实当成指针使用：1234void useBigger(const string &amp;s1, const string &amp;s2, bool pf(const string &amp;, const string &amp;)); //第三个参数会自动转换成指向函数的指针void useBigger(const string &amp;s1, const string &amp;s2, bool (*pf)(const string &amp;， const string &amp;));//等价声明","tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]},{"title":"随笔_","date":"2017-03-10T15:28:23.000Z","path":"2017/03/10/2017年03月10日23-27-37/","text":"Welcome to my blog, enter password to read. Decrypt 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","tags":[{"name":"生活","slug":"生活","permalink":"http://yoursite.com/tags/生活/"}]},{"title":"C++中const的用法","date":"2017-03-10T04:30:45.000Z","path":"2017/03/10/const/","text":"const变量const又叫做const限定符，用关键字const对变量的类型加以限定，可以使得变量的值不能被改变。 123const int i = 1; //正确：编译时初始化const int i = get_size(); //正确：运行时初始化const int k; //错误：k是一个未经初始化的常量 没有初始化的常量变量编译错误其实很好理解，因为经过const限定之后变量的值已经无法改变，如果没有初始化那么这个变量的值不确定，且之后其值不能被改变。 const引用const引用称为对常量的引用，简称为“常量引用”,顾名思义，就是这个对象是一个引用，而且这个对象经过const限定符作用之后，对象的值不能被改变。12345678int main() &#123; const int c1 = 10; const int &amp;r1 = c1; int c2 = 4; const int &amp;r2 = c2; c2 = 5; cout &lt;&lt; r2 &lt;&lt; endl;&#125; 如上所示，常量引用r1,r2是一个常量，而同时，因为const的限制，r1和r2的值不能改变，所以通过r1和r2修改c1和c2的值也就不可能，但是c2因为没有const的限制，可以通过c2修改自身的值。 引用的类型必须与其引用对象的类型一致，但存在例外。一种则是允许常量引用绑定一个非常量的对象，但是不能通过该常量引用改变绑定对象的值，此种情况上面已经出现，不在赘述。另一种是在初始化常量引用时允许用任意表达式作为初始值，只要该表达式的结果能转化为引用的类型即可。12double dval = 3.14;const int &amp;ri = dval; 上述代码是合法的操作c机制是12const int temp = dval;const int &amp;ri = temp; 也就是先将dval转化为整型，注意，其中的temp是临时量，所谓临时量对象就是当编译器需要一个空间来暂存表达式的求值结果临时创建的一个未命名的对象。而如果ri不是常量，即：12double dval = 3.14;int &amp;r1 = dval; 此时编译器会报错，错误如下：12error: invalid initialization of non-const reference of type ‘int&amp;’ from an rvalue of type ‘int’int &amp;r1 = dval; 指针和const与引用一样，也可以令指针指向常量或非常量，类似于常量引用，指向常量的指针（不是常量指针）不能用于改变其所指对象的值。要想存放常量对象的地址，只能使用指向常量的指针：1234const double pi = 3.14;double *ptr = &amp;pi; //错误：ptr是一个普通指针const double *cptr = &amp;pi; //正确：cptr可以指向一个常量*cptr = 42; //错误：不能给*cptr赋值 同样，指针的类型必须与其所指对象的类型一致，但是与引用一样，存在例外，允许一个指向常量的指针指向一个非常量的对象：12double dval = 3.14;const double *cptr = &amp;dval; //不能通过cptr改变dval的值 指针是对象而引用不是，所以允许把指针本身定为常量。常量指针必须初始化，一旦初始化完成，则指针的值不能被修改。1234int errNumb = 0;int *const curErr = &amp;errNumb;const double pi = 3.14;const double *const pip = &amp;pi; 将号放在const关键字之前用以说明指针是一个常量，不变的是指针本身的值而非指向的那个值。从右向左阅读解析，如上面代码第二行中，离curErr最近的符号是const，意味着curErr本身是一个常量对象，对象的类型由声明符的其余部分确定。声明符中的下一个符号是，意思是curErr是一个常量指针。最后，声明语句的基本数据类型部分确定了常量指针指向的是一个int对象。同理，我们可以看出pip是一个常量指针，指向的对象是一个双精度浮点型常量。 指向常量的指针和常量指针的对比指向常量的指针是指指针指向的值是一个常量（存在上述的例外），这就说明指针的值是可以被改变的，而常量指针是指指针本身是一个常量，但是指针指向的值不一定是常量。 顶层const指针本身是不是常量以及指针所指的是不是一个常量是两个相互独立的问题。用名词顶层const(top-level const)表示指针本身是个常量，而用名词底层const(low-level const)表示指针所指的对象是一个常量。更一般的，顶层const可以表示任意的对象是常量，这一点对任何数据类型都适用；底层const则与指针和引用等复合类型的基本类型部分有关。123456int i = 0;int *const pl = &amp;i; //顶层const int ci = 42; //顶层const int *p2 = &amp;ci; //底层const int *const p3 = p2; //左边是底层，右边是顶层const int &amp;r = ci; //用于声明引用的const都是底层const 常量表达式常量表达式是指值不会改变并且在编译过程就能得到计算结果的表达式。一个对象（或表达式）是不是常量表达式由它的数据类型和初始值共同决定，例如：1234const int max_files = 20; //是常量表达式const int limit = max_files + 1; //是常量表达式int staff_size = 27; //不是常量表达式，因为只是int类型const int sz = get_size(); //不是，sz的值要到运行时确定","tags":[{"name":"c++","slug":"c","permalink":"http://yoursite.com/tags/c/"}]},{"title":"Hello World","date":"2017-03-10T02:44:44.830Z","path":"2017/03/10/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[{"name":"hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]},{"title":"C和C++中声明和定义的区别","date":"2017-03-09T16:07:31.000Z","path":"2017/03/10/test-1/","text":"声明使得名字为程序所知，而定义负责创建与名字关联的实体。变量声明规定了变量的类型和名字，在这一点上定义与声明相同，然而定义还申请了存储空间，也可能会为变量赋一个初始值。 如果想声明一个变量而非定义它，就在变量名前添加关键字extern，而且不要显式地初始化变量123extern int i； //声明i而不是定义iint j; //声明并且定义了j 任何包含了显式初始化的声明即成为定义。 在函数体内部，如果试图初始化一个由extern关键字标记的变量，将引发错误。1234567#include &lt;iostream&gt;using namespace std;int main() &#123; extern int i = 3;&#125; 123error: ‘i’ has both ‘extern’ and initializerextern int i = 3; ^ 如果要在多个文件中使用同一个变量，就必须将声明和定义分离。此时，变量的定义必须出现在且只能出现在一个文件中，而其他用到变量的文件必须对其进行声明，却绝对不能重复定义。 正确的用法如下： test.hpp12345#include &lt;iostream&gt;using namespace std;int i = 2; test.cpp12345678910111213#include &lt;iostream&gt;#include \"test.hpp\"using namespace std;extern int i;int main() &#123; cout &lt;&lt; i; i = 1; cout &lt;&lt; endl &lt;&lt; i; return 0;&#125;","tags":[{"name":"C++","slug":"C","permalink":"http://yoursite.com/tags/C/"}]}]